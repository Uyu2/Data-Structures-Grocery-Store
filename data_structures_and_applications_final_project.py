# -*- coding: utf-8 -*-
"""Data Structures and Applications Final Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DIOilXBmZYt1WifWY52seVZfoXmfae_i

Hello! Welcome to my Grocery Store! If you have any questions, feel free to ask the appropriate representative below. Our sales representative gets a little confused with plural and singular nouns, so if there's an item you want to buy please be sure to specify if it's a plural or singular item based on its aisle. We have a customer service representative below, Ellis, who can give you more info on our items as well as list the exact names of our items. As well, here is a list of all grocery items you can find. thank you!

https://docs.google.com/document/d/1Vf1cdz8cNlvU-JHRGsTuXxjt4Pc1yschAy-T-sSRo4g/edit?usp=sharing

Before you can buy anything though, you need to bring in money. This function will let you earn money if you can guess the correct value! You will make $20 per correct guess, and the values are 1-5. This money can be used at the grocery store.
"""

y = 0

import numpy as np

x = np.random.randint(1, 5)
print(x)
def job():
  global y
  timecard = input('Please say your guess: ')
  print(" ")
  if int(timecard) == x:
    y = y + 16
    y = str(y)
    y =
    print('You now have $' + str(y) + ' to spend at the grocery store.')
  else:
    print('Please work again to gain more money.')

job()

"""This is Jeremy, our item tracker. As a item class he keeps track of all the different attributes of our items, and compares them using his less than and equal to tools. He then makes it into a string representation to store it in his own system!"""

class Item:
  id_counter = 100000

  def __init__(self, name, aisle, category, price, quantity):
    self.item_id = Item.id_counter
    self.name = name
    self.aisle = aisle
    self.category = category
    self.price = price
    self.quantity = quantity
    Item.id_counter += 1

  def __lt__(self, other):
    return self.name.lower() < other.name.lower()

  def __eq__(self, other):
    return self.name.lower() == other.name.lower()

  def __repr__(self):
    return (f"Item(Name: {self.name}, ID: {self.item_id}, Aisle: {self.aisle}, "
            f"Category: {self.category}, Price: ${self.price}, Quantity: {self.quantity})")

"""This is Marissa, she is the most important part of our team! Using a binary tree search she manages the items and can read the item attributes as well as references where the nodes connect to their child nodes. She also uses the Item Tree class to contain the binary search tree, and has methods to add items, traverse the tree, find items, and maps the aisle numbers to the lists of items. She took a really long time to get up to speed to the job, but she's a valuable member of the team!"""

class BinaryTreeNode:
  def __init__(self, item):
    self.item = item
    self.left = None
    self.right = None

class ItemTree:
  def __init__(self):
    self.root = None
    self.aisle_map = {}

  def add_item(self, item):
    if not self.root:
      self.root = BinaryTreeNode(item)
    else:
      self._add_item(self.root, item)
    if item.aisle not in self.aisle_map:
      self.aisle_map[item.aisle] = []
    self.aisle_map[item.aisle].append(item)

  def _add_item(self, node, item):
    if item < node.item:
      if node.left is not None:
        self._add_item(node.left, item)
      else:
        node.left = BinaryTreeNode(item)
    elif item > node.item:
      if node.right is not None:
        self._add_item(node.right, item)
      else:
        node.right = BinaryTreeNode(item)

  def get_items_by_aisle(self, aisle):
    return self.aisle_map.get(aisle, [])

  def in_order_traversal(self, node=None, result=None):
    if node is None:
      node = self.root
      result = []
    if node:
      self.in_order_traversal(node.left, result)
      result.append(node.item)
      self.in_order_traversal(node.right, result)
    return result

  def find_item(self, name):
    return self._find_item(self.root, name.lower())

  def _find_item(self, node, name):
    if node is None:
      return None
    item = Item(name, None, None, None, None)
    if item < node.item:
      return self._find_item(node.left, name)
    elif item > node.item:
      return self._find_item(node.right, name)
    else:
      return node.item

"""This is Blake. They are retired now since their job is finished, but originally they created all the items in the aisles that are in this store. They also took a really long time to get up to speed, but retired after their job since there is nothing left for them to do."""

item_tree = ItemTree()
item_tree.add_item(Item("Apples", 1, "Produce", 1.99, 30))
item_tree.add_item(Item("Bananas", 1, "Produce", 0.99, 9))
item_tree.add_item(Item("Avocados", 1, "Produce", 2.99, 18))
item_tree.add_item(Item("Carrots", 1, "Produce", 0.99, 28))
item_tree.add_item(Item("Potatoes", 1, "Produce", 1.99, 30))
item_tree.add_item(Item("Onions", 1, "Produce", 1.99, 25))
item_tree.add_item(Item("Garlic", 1, "Produce", 0.59, 33))
item_tree.add_item(Item("Blueberries", 1, "Produce", 4.99, 20))
item_tree.add_item(Item("Lettuce", 1, "Produce", 2.99, 10))
item_tree.add_item(Item("Strawberries", 1, "Produce", 4.99, 7))

item_tree.add_item(Item("Mayonnaise", 2, "Condiments", 4.99, 10))
item_tree.add_item(Item("Ketchup", 2, "Condiments", 4.99, 12))
item_tree.add_item(Item("Mustard", 2, "Condiments", 4.99, 13))
item_tree.add_item(Item("Relish", 2, "Condiments", 4.99, 20))
item_tree.add_item(Item("Barbecue Sauce", 2, "Condiments", 7.99, 6))
item_tree.add_item(Item("Soy Sauce", 2, "Global Foods", 4.99, 10))
item_tree.add_item(Item("Ramen", 2, "Global Foods", 1.99, 30))
item_tree.add_item(Item("Seaweed", 2, "Global Foods", 2.99, 9))
item_tree.add_item(Item("Kimchi", 2, "Global Foods", 10.99, 5))
item_tree.add_item(Item("Mapo Tofu Sauce", 2, "Global Foods", 3.99, 8))

item_tree.add_item(Item("Meatloaf", 3, "Frozen Dinners", 6.99, 9))
item_tree.add_item(Item("Pizza", 3, "Frozen Dinners", 4.99, 8))
item_tree.add_item(Item("Cheeseburger", 3, "Frozen Dinners", 5.99, 8))
item_tree.add_item(Item("Pesto Pasta", 3, "Frozen Dinners", 5.99, 6))
item_tree.add_item(Item("Breakfast Sandwich", 3, "Frozen Breakfast", 8.99, 12))
item_tree.add_item(Item("Waffles", 3, "Frozen Breakfast", 3.99, 7))
item_tree.add_item(Item("Pancakes", 3, "Frozen Breakfast", 3.99, 7))
item_tree.add_item(Item("Vanilla Ice Cream", 3, "Ice Cream", 4.99, 4))
item_tree.add_item(Item("Chocolate Ice Cream", 3, "Ice Cream", 4.99, 5))
item_tree.add_item(Item("Strawberry Ice Cream", 3, "Ice Cream", 4.99, 5))

item_tree.add_item(Item("Ice", 4, "Ice", 4.99, 10))
item_tree.add_item(Item("Bagel Bites", 4, "Bulk Frozen Foods", 10.99, 10))
item_tree.add_item(Item("Hot Pockets", 4, "Bulk Frozen Foods", 7.99, 5))
item_tree.add_item(Item("Chicken Wings", 4, "Bulk Frozen Foods", 12.99, 8))
item_tree.add_item(Item("French Fries", 4, "Bulk Frozen Foods", 5.99, 2))
item_tree.add_item(Item("Fish Sticks", 4, "Bulk Frozen Foods", 7.99, 9))
item_tree.add_item(Item("Taquitos", 4, "Bulk Frozen Foods", 6.99, 5))
item_tree.add_item(Item("Chicken Nuggets", 4, "Bulk Frozen Foods", 7.99, 8))
item_tree.add_item(Item("Broccoli", 4, "Bulk Frozen Foods", 3.99, 5))
item_tree.add_item(Item("Peas", 4, "Bulk Frozen Foods", 2.99, 7))

item_tree.add_item(Item("Ham", 5, "Cold Cuts", 5.99, 10))
item_tree.add_item(Item("Turkey", 5, "Cold Cuts", 5.99, 9))
item_tree.add_item(Item("Pastrami", 5, "Cold Cuts", 5.99, 6))
item_tree.add_item(Item("Cream Cheese", 5, "Cheese", 4.99, 5))
item_tree.add_item(Item("Gouda Cheese", 5, "Cheese", 7.99, 3))
item_tree.add_item(Item("Cheddar Cheese", 5, "Cheese", 5.99, 6))
item_tree.add_item(Item("Swiss Cheese", 5, "Cheese", 5.99, 3))
item_tree.add_item(Item("Yogurt", 5, "Yogurt", 3.99, 2))
item_tree.add_item(Item("Milk", 5, "Dairy", 4.99, 6))
item_tree.add_item(Item("Eggs", 5, "Eggs", 6.99, 10))

item_tree.add_item(Item("Wheat Bread", 6, "Bread", 5.99, 9))
item_tree.add_item(Item("White Bread", 6, "Bread", 5.99, 7))
item_tree.add_item(Item("Sourdough Bread", 6, "Bread", 9.99, 6))
item_tree.add_item(Item("Dorito's Chips", 6, "Chips", 4.99, 5))
item_tree.add_item(Item("Cheeto's Chips", 6, "Chips", 5.99, 12))
item_tree.add_item(Item("Lay's Chips", 6, "Chips", 4.99, 13))
item_tree.add_item(Item("Chocolat Chip Cookies", 6, "Cookies/Chocolate", 6.99, 8))
item_tree.add_item(Item("Oatmeal Cookies", 6, "Cookies/Chocolate", 5.99, 9))
item_tree.add_item(Item("Dark Chocolates", 6, "Cookies/Chocolate", 3.99, 10))
item_tree.add_item(Item("Milk Chocolates", 6, "Cookies/Chocolate", 4.99, 11))

item_tree.add_item(Item("Brooms", 7, "Cleaning Supplies", 17.99, 3))
item_tree.add_item(Item("Plastic Gloves", 7, "Cleaning Supplies", 5.99, 30))
item_tree.add_item(Item("Bleach", 7, "Cleaning Supplies", 7.99, 4))
item_tree.add_item(Item("Mops", 7, "Cleaning Supplies", 16.99, 2))
item_tree.add_item(Item("Dustpans", 7, "Cleaning Supplies", 7.99, 2))
item_tree.add_item(Item("Buckets", 7, "Cleaning Supplies", 10.99, 4))
item_tree.add_item(Item("Dish Soap", 7, "Cleaning Supplies", 7.99, 10))
item_tree.add_item(Item("Dish Wands", 7, "Cleaning Supplies", 5.99, 3))
item_tree.add_item(Item("Sponges", 7, "Cleaning Supplies", 2.99, 30))
item_tree.add_item(Item("Towels", 7, "Cleaning Supplies", 10.99, 4))

item_tree.add_item(Item("Aquafina Water", 8, "Water", 6.99, 4))
item_tree.add_item(Item("Dasani Water", 8, "Water", 5.99, 5))
item_tree.add_item(Item("Nestle Water", 8, "Water", 5.99, 6))
item_tree.add_item(Item("Lemonade", 8, "Drinks", 4.99, 3))
item_tree.add_item(Item("Apple Juice", 8, "Drinks", 4.99, 4))
item_tree.add_item(Item("Cranberry Juice", 8, "Drinks", 5.99, 5))
item_tree.add_item(Item("Pepsi", 8, "Soda", 4.99, 7))
item_tree.add_item(Item("Coca-Cola", 8, "Soda", 4.99, 8))
item_tree.add_item(Item("Fanta", 8, "Soda", 4.99, 7))
item_tree.add_item(Item("Sprite", 8, "Soda", 4.99, 6))

item_tree.add_item(Item("Pork", 9, "Meat", 9.99, 4))
item_tree.add_item(Item("Chicken", 9, "Meat", 8.99, 8))
item_tree.add_item(Item("Beef", 9, "Meat", 17.99, 5))
item_tree.add_item(Item("Turkey", 9, "Meat", 15.99, 2))
item_tree.add_item(Item("Tuna", 9, "Fish", 18.99, 4))
item_tree.add_item(Item("Salmon", 9, "Fish", 17.99, 3))
item_tree.add_item(Item("Albacore", 9, "Fish", 18.99, 1))
item_tree.add_item(Item("Sundubu", 9, "Meat Alternative", 8.99, 4))
item_tree.add_item(Item("Firm Tofu", 9, "Meat Alternative", 8.99, 5))
item_tree.add_item(Item("Sausages", 9, "Meat", 7.99, 5))

item_tree.add_item(Item("Cards", 10, "Miscellaneous", 4.99, 4))
item_tree.add_item(Item("Dog Food", 10, "Miscellaneous", 31.99, 3))
item_tree.add_item(Item("Cat Food", 10, "Miscellaneous", 29.99, 3))
item_tree.add_item(Item("Pots", 10, "Miscellaneous", 16.99, 2))
item_tree.add_item(Item("Pans", 10, "Miscellaneous", 32.99, 1))
item_tree.add_item(Item("Bubblegum", 10, "Miscellaneous", 3.99, 20))
item_tree.add_item(Item("Cheesecloths", 10, "Miscellaneous", 1.99, 4))
item_tree.add_item(Item("Gift Bags", 10, "Miscellaneous", 10.99, 8))
item_tree.add_item(Item("Wrapping Paper", 10, "Miscellaneous", 9.99, 3))
item_tree.add_item(Item("Board Games", 10, "Miscellaneous", 24.99, 4))

"""This is Bob, he trains others on how to use his shopping_list() function. The function asks a series of questions to see what you would like, then after you've answered will see if you want anything else with a (Yes/No).

If you do, it will continue to take responses until you say no, then will proceed to ring you up after confirming your shopping list and cost. If you don't agree with what it has said, you can always say no and restart.

Below you can find James, our sales representative, who can help you ring up your items using Bob's tool. They would be more than happy to help you, but first you should read about what Ellis does!
"""

def shopping_list():
  global item_tree
  shopping_cart = []

  while True:
    print(" ")
    item_name = input("What item are you looking for today? ").strip()
    item = item_tree.find_item(item_name)
    if item:
      print(" ")
      print("I'll add " + str(item.name) + " to your cart for $" + str(item.price) + ".")
      shopping_cart.append(item)
    else:
      print(" ")
      print("Sorry, we don't carry that item.")


    more = input("Anything else? (yes/no) ").strip().lower()
    if more != 'yes':
      if shopping_cart:
        confirm_and_checkout(shopping_cart)
      break

def confirm_and_checkout(shopping_cart):
  global y
  global item_tree
  total_price = sum([item.price for item in shopping_cart])
  total_price = round(total_price, 2)
  print(" ")
  print("Okay, you want to buy:")
  for item in shopping_cart:
    print(item.name)
  confirmation = input("Total Price: $" + str(total_price) + ", correct? (yes/no) ").strip().lower()
  if confirmation == 'yes':
    if total_price <= y:
      print(" ")
      print("Thank you so much!")
      y = y - total_price
      print(" ")
      print("You now have $" + str(y) + " left.")
    if total_price > y:
      print(" ")
      print("You do not have enough money. Please buy something else or generate more money.")
      shopping_cart.clear()
  else:
    print(" ")
    print("Let's try this again.")
    shopping_cart.clear()
    shopping_list()

"""This is Ellis. They can answer your questions about the aisles. They do this using a defined function that gets the items in each aisle (1-10), then takes your input for an aisle number in an integer. They then add the item categories to a list for its respective aisle, and uses if functions to give you back the items in that aisle. Lastly, They will inform you of the aisle item's name and quantity so you can make an informed decision on what is in stock for you to buy. You can then bring this info to James to buy!"""

def get_items_in_aisle(self, aisle):
  items_in_aisle = []
  for item in self.in_order_traversal():
    if item.aisle == aisle:
      items_in_aisle.append(item)
  return items_in_aisle
aisle = int(input("What aisle do you want to ask about? "))

items_in_aisle = item_tree.get_items_by_aisle(aisle)

categories = []

for item in items_in_aisle:
  if item.category not in categories:
    categories.append(item.category)

print(" ")
print("The categories in aisle " + str(aisle) + " are:")
for category in categories:
  print(category)

if items_in_aisle:
  print(" ")
  print("Here are the items in aisle " + str(aisle) + ":")
  for item in items_in_aisle:
    print(item.name + " - Quantity - " + str(item.quantity) + " - Price - $" + str(item.price))
else:
  print(str(aisle) + " is an invalid aisle, please enter a number 1-10")

"""This is James. He'll help you check out today!"""

shopping_list()

"""Thanks for shopping, hope to see you again soon!"""